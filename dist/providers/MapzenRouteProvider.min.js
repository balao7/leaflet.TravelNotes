/*! leaflet.TravelNotesMapzen - version 1.0.0 - 2017-09-14 - Copyright 2017 Christian Guyette - Contact: http//www.ouaie.be/ - This  program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or any later version.*/


!function e(r,t,n){function i(o,u){if(!t[o]){if(!r[o]){var d="function"==typeof require&&require;if(!u&&d)return d(o,!0);if(a)return a(o,!0);var s=new Error("Cannot find module '"+o+"'");throw s.code="MODULE_NOT_FOUND",s}var c=t[o]={exports:{}};r[o][0].call(c.exports,function(e){var t=r[o][1][e];return i(t||e)},c,c.exports,e,r,t,n)}return t[o].exports}for(var a="function"==typeof require&&require,o=0;o<n.length;o++)i(n[o]);return i}({1:[function(e,r,t){"use strict";function n(e,r){e=Math.round(e*r),(e<<=1)<0&&(e=~e);for(var t="";e>=32;)t+=String.fromCharCode(63+(32|31&e)),e>>=5;return t+=String.fromCharCode(e+63)}function i(e){for(var r=[],t=0;t<e.length;t++)r.push(e[t].slice().reverse());return r}var a={};a.decode=function(e,r){for(var t,n=0,i=0,a=0,o=[],u=0,d=0,s=null,c=Math.pow(10,r||5);n<e.length;){s=null,u=0,d=0;do{d|=(31&(s=e.charCodeAt(n++)-63))<<u,u+=5}while(s>=32);t=1&d?~(d>>1):d>>1,u=d=0;do{d|=(31&(s=e.charCodeAt(n++)-63))<<u,u+=5}while(s>=32);i+=t,a+=1&d?~(d>>1):d>>1,o.push([i/c,a/c])}return o},a.encode=function(e,r){if(!e.length)return"";for(var t=Math.pow(10,r||5),i=n(e[0][0],t)+n(e[0][1],t),a=1;a<e.length;a++){var o=e[a],u=e[a-1];i+=n(o[0]-u[0],t),i+=n(o[1]-u[1],t)}return i},a.fromGeoJSON=function(e,r){if(e&&"Feature"===e.type&&(e=e.geometry),!e||"LineString"!==e.type)throw new Error("Input must be a GeoJSON LineString");return a.encode(i(e.coordinates),r)},a.toGeoJSON=function(e,r){return{type:"LineString",coordinates:i(a.decode(e,r))}},"object"==typeof r&&r.exports&&(r.exports=a)},{}],2:[function(e,r,t){!function(){"use strict";L.travelNotes.interface().addProvider(function(){var r=["kUndefined","kDepartDefault","kDepartRight","kDepartLeft","kArriveDefault","kArriveRight","kArriveLeft","kNewNameStraight","kContinueStraight","kTurnSlightRight","kTurnRight","kTurnSharpRight","kUturnRight","kUturnLeft","kTurnSharpLeft","kTurnLeft","kTurnSlightLeft","kUndefined","kOnRampRight","kOnRampLeft","kOffRampRight","kOffRampLeft","kStayStraight","kStayRight","kStayLeft","kMergeDefault","kRoundaboutRight","kRoundaboutExit","kFerryEnter","kFerryExit","kUndefined","kUndefined","kUndefined","kUndefined","kUndefined","kUndefined","kUndefined"],t={fr:["","Départ","Départ à votre droite","Départ à votre gauche","Arrivée","Arrivée à droite","Arrvée à gauche","Continuer","Continuer","Tourner légèrement à droite","Tourner  à droite","Tourner franchement à droite","Demi-tour vers la droite","Demi-tour vers la gauche","Tourner franchement à gauche","Tourner à gauche","Tourner légèrement à gauche","Prendre l'entrée en face","Prendre l'entrée à droite","Prendre l'entrée à gauche","Prendre la sortie à droite","Prendre la sortie à gauche","Rester au centre","Rester à droite","Rester à gauche","Fusionner","Entrer dans le rond-point","Sortir du rond-point","Entrer dans le ferry","Sortir du ferry","","","","","","",""],en:["","Départ","Départ à votre droite","Départ à votre gauche","Arrivée","Arrivée à droite","Arrvée à gauche","Continuer","Continuer","Tourner légèrement à droite","Tourner à droite","Tourner franchement à droite","Demi-tour vers la droite","Demi-tour vers la gauche","Tourner franchement à gauche","Tourner à gauche","Tourner légèrement à gauche","Prendre l'entrée en face","Prendre l'entrée à droite","Prendre l'entrée à gauche","Prendre la sortie à droite","Prendre la sortie à gauche","Rester au centre","Rester à droite","Rester à gauche","Fusionner","Entrer dans le rond-point","Sortir du rond-point","Entrer dans le ferry","Sortir du ferry","","","","","","",""]},n=function(n,i,a){var o=JSON.parse(n);i.itinerary.itineraryPoints.removeAll(),i.itinerary.maneuvers.removeAll();var u=t[a]||t.en,d=0,s=0;o.trip.legs.forEach(function(t){t.shape=e("polyline").decode(t.shape,6);for(var n=[],a=0;a<t.shape.length;a++){var o=L.travelNotes.interface().itineraryPoint;o.latLng=t.shape[a],a!==t.shape.length-1&&(o.distance=L.latLng(t.shape[a]).distanceTo(L.latLng(t.shape[a+1])),d+=o.distance),n.push(o),i.itinerary.itineraryPoints.add(o)}t.maneuvers.forEach(function(e){var t=L.travelNotes.interface().maneuver;t.iconName=r[e.type||0],t.instruction=e.instruction||"",t.streetName="",e.street_names&&e.street_names.forEach(function(e){t.streetName+=e+" "}),t.direction="---",t.simplifiedInstruction=u[e.type||0],t.distance=1e3*(e.length||0),s+=t.distance,t.duration=e.time||0,t.itineraryPointObjId=n[e.begin_shape_index].objId,n[e.begin_shape_index].maneuverObjId=t.objId,i.itinerary.maneuvers.add(t)})});for(var c=s/d,l=i.itinerary.itineraryPoints.iterator;!l.done;)l.value.distance=l.value.distance*c;var f=i.wayPoints.iterator;o.trip.locations.forEach(function(e){f.done||(f.value.latLng=[e.lat,e.lon])})},i=function(e,r,t,n,i){var a={};a.locations=[];for(var o=e.iterator;!o.done;)a.locations.push({lat:o.value.lat,lon:o.value.lng,type:o.first||o.last?"break":"through"});switch(r){case"car":a.costing="auto",a.costing_options={auto:{country_crossing_cost:"60"}};break;case"bike":a.costing="bicycle",a.costing_options={bicycle:{bicycle_type:"Mountain",cycling_speed:"20.0",use_roads:"0",use_hills:"1"}};break;case"pedestrian":a.costing="pedestrian",a.costing_options={pedestrian:{walking_speed:"4.0"}};break;default:return void console.log("invalid transitMode")}return a.directions_options={language:n},"https://valhalla.mapzen.com/route?json="+JSON.stringify(a)+"&api_key="+t};return{get icon(){return"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"},getUrl:function(e,r,t,n,a){return i(e,r,t,n)},parseResponse:function(e,r,t){n(e,r,t)},get name(){return"Mapzen"},get transitModes(){return{car:!0,bike:!0,pedestrian:!0}}}}())}()},{polyline:1}]},{},[2]);